# -*- coding: utf-8 -*-
"""THGNN generate_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xo_74VNYthvMNcj96Ky8pbwHmbz9hqNh
"""





from datetime import datetime

import os
import torch
import pickle
import numpy as np
from tqdm import tqdm
import networkx as nx
import pandas as pd
from torch.autograd import Variable

feature_cols = ['high','low','close','open']

path1 = "/mnt/data/sriram.kovela/THGNN/csi300.pkl"
df5 = pickle.load(open(path1, 'rb'), encoding='utf-8')


df1 = pd.read_csv(os.path.join('/mnt/data/sriram.kovela/', "norm_2016_mean.csv"))
#df1 = df1.rename(columns={'rr': 'label'})

date_unique=set(df1['date'])
print(date_unique)
stock_trade_data=list(date_unique)
print(stock_trade_data)
stock_trade_data.sort()
print("!!!!!!!!!!!!!!!!!!!1")
print(stock_trade_data)
#[item.strftime("%Y-%m-%d") for item in stock_trade_data]
#list(map(str.strftime("%Y-%m-%d"), stock_trade_data))
#stock_trade_data = [x.strftime("%Y-%m-%d").replace("'", "")for x in stock_trade_data]
print("((((((((((((((((",stock_trade_data)
df1['date']=df1['date'].astype('datetime64')
print(type(stock_trade_data[0]))

#df1['date']=df1['date'].astype('datetime64')

def fun(relation_dt, start_dt_month, end_dt_month,df1):
    print("type is ", type(start_dt_month))
    prev_date_num = 24
    adj_all = pd.read_csv('/mnt/data/sriram.kovela/THGNN/relation/'+relation_dt+'.csv', index_col=0)
    print("!!!!!!!!!!!", adj_all)
    adj_stock_set = list(adj_all.index)
    pos_g = nx.Graph(adj_all > 0.1)
    print("ps_g is ", pos_g)
    pos_adj = nx.adjacency_matrix(pos_g).toarray()
    pos_adj = pos_adj - np.diag(np.diag(pos_adj))
    pos_adj = torch.from_numpy(pos_adj).type(torch.float32)
    neg_g = nx.Graph(adj_all < -0.1)
    print("neg is ", neg_g)
    neg_adj = nx.adjacency_matrix(neg_g)
    neg_adj.data = np.ones(neg_adj.data.shape)
    print("neg_adj data is", neg_adj.data )
    neg_adj = neg_adj.toarray()
    neg_adj = neg_adj - np.diag(np.diag(neg_adj))
    neg_adj = torch.from_numpy(neg_adj).type(torch.float32)
    print('neg_adj over')
    print(neg_adj.shape)
    print("start ", start_dt_month)
    print("end ", end_dt_month)
    print("@@@@@@@@@@@@2")
    print(stock_trade_data)
    dts = stock_trade_data[stock_trade_data.index((start_dt_month)):stock_trade_data.index((end_dt_month))+1]
    print("dts is ",dts)
    for i in tqdm(range(len(dts))):
        end_data=dts[i]

        start_data = stock_trade_data[stock_trade_data.index(end_data)-(prev_date_num - 1)]
        print("start  date is ", start_data)
        print("end date is ", end_data)
        df2 = df1.loc[df1['date'] <= end_data]
        df2 = df2.loc[df2['date'] >= start_data]
        code = adj_stock_set
        feature_all = []
        mask = []
        labels = []
        day_last_code = []
        for j in range(len(code)):
            df3 = df2.loc[df2['tic'] == code[j]]
            y = df3[feature_cols].values
            if y.T.shape[1] == prev_date_num:
                one = []
                feature_all.append(y)
                mask.append(True)
                label = df3.loc[df3['date'] == end_data]['label'].values
                labels.append(label[0])
                one.append(code[j])
                one.append(end_data)
                day_last_code.append(one)
        feature_all = np.array(feature_all)
        features = torch.from_numpy(feature_all).type(torch.float32)
        mask = [True]*len(code)
        print("labels are", labels)
        labels = torch.tensor(labels, dtype=torch.float32)
        result = {'pos_adj': Variable(pos_adj), 'neg_adj': Variable(neg_adj),  'features': Variable(features),'labels': Variable(labels),
                   'mask': mask}

        with open('/mnt/data/sriram.kovela/THGNN/data_train_predict/'+end_data+'.pkl', 'wb') as f:
            pickle.dump(result, f)
        df = pd.DataFrame(columns=['code', 'dt'], data=day_last_code)
        #print("inside open!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", df)
        df.to_csv('/mnt/data/sriram.kovela/THGNN/daily_stock/'+end_data+'.csv', header=True, index=False, encoding='utf_8_sig')

import time
import datetime


string = "22/06/2018"
print(time.mktime(datetime.datetime.strptime(string,
                                            "%d/%m/%Y").timetuple()))



fun('2020-02-13','2016-01-04','2020-02-13',df1)
fun('2024-03-28','2020-02-18','2024-03-28',df1)
